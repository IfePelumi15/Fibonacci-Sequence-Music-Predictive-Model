# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NW7b8tJYoWuGxEUwMbDOVCyyAszaDl6f
"""

#create and manage playlists
user_id = user_info['id']
playlist = sp.user_playlist_create(user_id,'My New Playlist', public=False
print(f"Created Playlist: {playlist['name']}")
track_ids = ['spotify:track:TRACK_ID_1', 'spotify:track:TRACK_ID_2']
sp.playlist_add_items(playlist['id'], track_ids)
print("Added tracks to the playlist.")

!pip install spotipy

!pip install spotipy flask-ngrok



from flask  import Flask
from flask_ngrok import run_with_ngrok
app = Flask(__name__)
run_with_ngrok(app)
@app.route("/callback")
def callback():
  return "Spotify authentication successful"
if __name__ == "__main__":
  app.run()

!pip install flask pyngrok spotipy

from pyngrok import ngrok
ngrok.set_auth_token('2tRy6RKGU4HnulW07cmaeAKxqbu_7d1aRtcQFntfDLBAb9Qy3')

from flask import Flask, request, redirect
import spotipy
from spotipy.oauth2 import SpotifyOAuth
app = Flask(__name__)
# Spotify API Credentials
CLIENT_ID = "66f461e1cd7a4334beaec32db07c9e99"
CLIENT_SECRET = "d6e8e74db3f340578e4902ff4327b8d2"
REDIRECT_URI = "http://localhost:8888/callback"

# Initialize Spotipy OAuth
sp_oauth = SpotifyOAuth(client_id=CLIENT_ID,
                        client_secret=CLIENT_SECRET,
                        redirect_uri=REDIRECT_URI,
                        scope="user-library-read")
@app.route('/')
def index():
  auth_url = sp_oauth.get_authorize_url()
  return f'<h2><a href={auth_url}">Authenticate with Spotify</a></h2>'
@app.route('/callback')
def callback():
  code = request.args.get('code')
  token_info = sp_oauth.get_access_token(code)
  return f"Access token: {token_info['access_token']}"
if __name__ == "__main__":
  app.run(port=5000)

# start ngrok tunnel
public_url = ngrok.connect(5000)
print(f"ngrok tunnel available at: {public_url}")
# Update the redirect URI to use the ngrok public URL
sp_oauth.redirect_uri = f"{public_url}/callback"
# Run the Flask app
app.run(port=5000)

import spotipy
from spotipy.oauth2 import SpotifyOAuth
import sys
# Spotify API Credentials
CLIENT_ID = "66f461e1cd7a4334beaec32db07c9e99"
CLIENT_SECRET = "d6e8e74db3f340578e4902ff4327b8d2"
REDIRECT_URI = "http://localhost:8888/callback"

# Authenticate manually
sp_oauth = SpotifyOAuth(client_id=CLIENT_ID,
                        client_secret=CLIENT_SECRET,
                        redirect_uri=REDIRECT_URI,
                        scope="user-read-recently-played user-top-read")
# Generate the auth URL
auth_url = sp_oauth.get_authorize_url()
print(f"Open this URL to authorize: {auth_url}")

from pyngrok import ngrok
ngrok.set_auth_token('2tRy6RKGU4HnulW07cmaeAKxqbu_7d1aRtcQFntfDLBAb9Qy3')

from flask import Flask, request, redirect
import spotipy
from spotipy.oauth2 import SpotifyOAuth
app = Flask(__name__)
# Spotify API Credentials
CLIENT_ID = "66f461e1cd7a4334beaec32db07c9e99"
CLIENT_SECRET = "d6e8e74db3f340578e4902ff4327b8d2"
REDIRECT_URI = "http://localhost:8888/callback"

# Initialize Spotipy OAuth
sp_oauth = SpotifyOAuth(client_id=CLIENT_ID,
                        client_secret=CLIENT_SECRET,
                        redirect_uri=REDIRECT_URI,
                        scope="user-library-read")
@app.route('/')
def index():
  auth_url = sp_oauth.get_authorize_url()
  return f'<h2><a href={auth_url}">Authenticate with Spotify</a></h2>'
@app.route('/callback')
def callback():
  code = request.args.get('code')
  token_info = sp_oauth.get_access_token(code)
  return f"Access token: {token_info['access_token']}"
if __name__ == "__main__":
  app.run(port=5000)

# start ngrok tunnel
public_url = ngrok.connect(5000)
print(f"ngrok tunnel available at: {public_url}")
# Update the redirect URI to use the ngrok public URL
sp_oauth.redirect_uri = f"{public_url}/callback"
# Run the Flask app
app.run(port=5000)

import spotipy
from spotipy.oauth2 import SpotifyOAuth
import sys
# Spotify API Credentials
CLIENT_ID = "66f461e1cd7a4334beaec32db07c9e99"
CLIENT_SECRET = "d6e8e74db3f340578e4902ff4327b8d2"
REDIRECT_URI = "http://localhost:8888/callback"

# Authenticate manually
sp_oauth = SpotifyOAuth(client_id=CLIENT_ID,
                        client_secret=CLIENT_SECRET,
                        redirect_uri=REDIRECT_URI,
                        scope="user-read-recently-played user-top-read")
# Generate the auth URL
auth_url = sp_oauth.get_authorize_url()
print(f"Open this URL to authorize: {auth_url}")

"""# New Section"""

import urllib.parse
CLIENT_ID = '66f461e1cd7a4334beaec32db07c9e99'
REDIRECT_URI = 'http://breakdownhost:5555/callback'
SCOPE = 'user-library-read'
auth_url = f'https://accounts.spotify.com/authorize?client_id={CLIENT_ID}&response_type=code&redirect_uri={urllib.parse.quote(REDIRECT_URI)}&scope={SCOPE}'
print(auth_url)

!pip install spotipy

import spotipy
from spotipy.oauth2 import SpotifyOAuth
CLIENT_ID = '66f461e1cd7a4334beaec32db07c9e99'
CLIENT_SECRET = 'd6e8e74db3f340578e4902ff4327b8d2'
REDIRECT_URI = 'http://breakdownhost:5555/callback'
SCOPE = 'user-library-read'

sp_oauth = SpotifyOAuth(client_id=CLIENT_ID,
                        client_secret=CLIENT_SECRET,
                        redirect_uri=REDIRECT_URI,
                        scope=SCOPE)
auth_url = sp_oauth.get_authorize_url()
print(f'Please navigate here: {auth_url}')

import requests
import base64
CLIENT_SECRET = 'd6e8e74db3f340578e4902ff4327b8d2'
AUTHORIZATION_CODE = 'AQBLyV_03nMDFnOYg96BCuuu2YtiCJw2AuC7V_wQ2i9W6qrkVzdU_Lqu5OoXy7mrmn3fvbrnleK6cBdST3MEYITCg9JsDTu-fcoZDWR_er4DVqxXuFiOFRNsRJcNZguOzcebs3jypkiQaSe-A6onn0aiCqycDHl_MGirShBXCSq_lXiaxO51huJnjdv5x-ezgkTJAOFqIq8v'
TOKEN_URL = 'https://accounts.spotify.com/api/token'
auth_header = base64.b64encode(f"{CLIENT_ID}:{CLIENT_SECRET}".encode('utf-8')).decode('utf-8')
headers = {
    'Authorization': f'Basic {auth_header}',
    'Content-Type': 'application/x-www-form-urlencoded'
}
data = {
    'grant_type': 'authorization_code',
    'code': AUTHORIZATION_CODE,
    'redirect_uri': 'http://breakdownhost:5555/callback'
}
response = requests.post(TOKEN_URL, headers=headers, data=data)
token_info = response.json()
access_token = token_info.get('access_token')
refresh_token = token_info.get('refresh_token')
print(f'Access Token: {access_token}')
print(f'Refresh Token: {refresh_token}')

#refreshing access token
data = {
    'grant_type': 'refresh_token'
}
response = requests.post(TOKEN_URL, headers=headers, data=data)
token_info = response.json()
access_token = token_info.get('access_token')
print(f'New Access Token: {access_token}')

import requests
# define the endpoint
endpoint = "https://api.spotify.com/v1/me"

# set up the headers with the access token
headers = {
    "Authorization": f"Bearer {access_token}"
}

# make the GET request
response = requests.get(endpoint, headers=headers)

# check the response status
if response.status_code == 200:
    # the request was successful
    user_data = response.json()
    print(user_data)
else:
    # the request failed
    print(f"Request failed with: {response.status_code}")

# handling token expiry and refresh
import base64
# spotify API token endpoint
TOKEN_URL = 'https://accounts.spotify.com/api/token'
# base64 encode client ID and client secret
client_creds = f"{CLIENT_ID}:{CLIENT_SECRET}"
client_creds_b64 = base64.b64encode(client_creds.encode()).decode()
# setup headers and data for the token request
headers = {
    'Authorization': f'Basic {client_creds_b64}',
    'Content-Type': 'application/x-www-form-urlencoded'
}
data = {
    'grant_type': 'refresh_token',
    'refresh_token': refresh_token
}
# make the token request
response = requests.post(TOKEN_URL, headers=headers, data=data)
# check the response status
if response.status_code == 200:
  token_info = response.json()
  access_token = token_info.get('access_token')
  print(f"Access Token Refreshed.")
else:
  print(f"Token Refresh Failed: {response.status_code}")

# spotify API endpoint
URL = 'https://accounts.spotify.com/v1/me/playlists'